{"version":3,"sources":["components/Navbar.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","greeting","axios","get","then","res","setState","data","className","this","Component","Login","handleSubmit","event","preventDefault","post","email","password","jwtToken","token","console","log","catch","err","response","status","handleChange","target","name","value","onSubmit","type","placeholder","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sRAIqBA,E,YACnB,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACXC,SAAW,QAHF,E,iFAOO,IAAD,OACjBC,IAAMC,IAAI,WACHC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZL,SAAWI,EAAIE,Y,+BAMzB,OACE,yBAAKC,UAAU,UACb,4BACE,oCACA,4BAAKC,KAAKT,MAAMC,gB,GAtBUS,a,sBCAfC,E,YACnB,aAAc,IAAD,8BACX,+CAQFC,aAAe,SAACC,GACdA,EAAMC,iBAENZ,IAAMa,KAAK,SAAU,CAAEC,MAAO,EAAKhB,MAAMgB,MAAOC,SAAU,EAAKjB,MAAMiB,WAC9Db,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZY,SAAUb,EAAIE,KAAKY,MAAMA,QAE3BC,QAAQC,IAAIhB,EAAIE,SAEjBe,OAAM,SAAAC,GACsB,MAAxBA,EAAIC,SAASC,QACd,EAAKnB,SAAS,CACZY,SAAU,wCAtBX,EA4BbQ,aAAe,SAACb,GACd,EAAKP,SAAL,eACGO,EAAMc,OAAOC,KAAQf,EAAMc,OAAOE,SA5BrC,EAAK7B,MAAQ,CACXgB,MAAO,GACPC,SAAU,GACVC,SAAW,oBALF,E,sEAmCX,OACE,6BACE,0BAAMY,SAAUrB,KAAKG,cACnB,2BAAOgB,KAAK,QAAQG,KAAK,OAAOC,YAAY,QAAQC,SAAUxB,KAAKiB,eACnE,2BAAOE,KAAK,WAAWG,KAAK,WAAWC,YAAY,WAAWC,SAAUxB,KAAKiB,eAC7E,2CAGF,4BAAKjB,KAAKT,MAAMkB,e,GA5CWR,aCapBwB,MAXf,WACE,OACE,yBAAK1B,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,MAAK,SAAA2C,GACjCA,EAAaC,kB","file":"static/js/main.7e6e2af8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n\nexport default class Navbar extends Component{\n  constructor(){\n    super();\n    this.state = {\n      greeting : 'test'\n    }\n  }\n\n  componentDidMount(){\n    axios.get('/navbar')\n          .then(res => {\n            this.setState({\n              greeting : res.data\n            });\n          });\n  }\n\n  render(){\n    return (\n      <nav className=\"navbar\">\n        <ul>\n          <li>Home</li>\n          <li>{this.state.greeting}</li>\n        </ul>\n      </nav>\n  );\n  }\n}\n\n\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\n\nexport default class Login extends Component{\n  constructor(){\n    super();\n    this.state = {\n      email: '',\n      password: '',\n      jwtToken : 'N/A. Login first'\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    axios.post('/login', { email: this.state.email, password: this.state.password })\n          .then(res => {\n            this.setState({\n              jwtToken: res.data.token.token\n            })\n            console.log(res.data)\n          })\n          .catch(err=> {\n            if(err.response.status === 401){\n              this.setState({\n                jwtToken: 'Wrong email/password. Try again'\n              });\n            }\n          })\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name] : event.target.value\n    });\n  }\n\n  render(){\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input name=\"email\" type=\"text\" placeholder=\"email\" onChange={this.handleChange}></input>\n          <input name=\"password\" type=\"password\" placeholder=\"password\" onChange={this.handleChange}></input>\n          <button>Submit</button>\n        </form>\n\n        <h4>{this.state.jwtToken}</h4>\n      </div>\n\n  );\n  }\n}\n\n\n","import React from 'react';\nimport Navigation from './components/Navbar'\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Login from './components/Login';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Navigation />\n        <Login />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}